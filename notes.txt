Notes 
    CSS behind the scenes
        CSS parsing in browser
            cascade
                combine different style sheets
                resolve conflicting CSS declarations
                priority order 
                    important > specificity > source order 
                    specificity
                        inline > id > classes > elements
                        1 id > 1000 classes
                        1 class > 1000 elements
                        * selector has no specificity value
            process final css values
            CSS Object Model (CSSOM) is created
            DOM and CSSOM forms Render tree 
            website is rendered
    units 
        em  
            relative to it's parent font size
            for lengths, it is relative to it's current font size
        rem 
            relative to a base font-size
            base/root font size is usually 16px
            we can override root font size like 
                html {
                    font-size: 12px;
                }
        vh,vw are viewport(screen) height and viewport(screen) width
    why to change px units to rem?
        we can easily change all measurement with 1 change i.e. root font size
        for mobile, all measurements will be automatically adjusted
        it changes measurements according to user preference(front size)
        help ensure consistency across different devices and screen sizes. 
        Since REMs are based on the root font size
    pseudo classes 
        special state of an element.
        ex: for anchor (a) tag
        a:link
            unvisited state 
        a:visited
        a:hover
        a:active 
            selected state
        and also first-child, last-child etc 
    pseudo elements
        used to style specified parts of an element
        ex: ::first-letter,::before,::after,::selection etc

    display 
        inline 
            no height and width properties
            can have left & right margins and padding, but not top & bottom
            occupies only content size.
            displays the element inline or on the same line
            ex: span,a, img
        inline-block
            same as inline 
            can set height and width
            respect top & bottom margins and padding
        block 
            starts on a new line and takes up the full width available (parent width).
            can set width and height
    position
        default
            normal flow
            position:relative;
        Floats 
            element removed from normal flow 
            text and inline elements will wrap around floated element
            container will not adjust it's height to the element
            float:left;
            float:right;
        absolute 
            element removed from normal flow 
            no impact on surrounding content or elements
            top,bottom,right,left are used to offset the element from it's relative/other positioned container           
        fixed
            same as absolute
            but it doesn't change position when scrolling, it stays there
    

    Meaning full class names 
        Block Element Modifier (BEM)
            Block 
                standalone component that is meaningfull on it's only 
            Element
                part of block, that has no standalone meaning 
            Modifier
                a different version of block or element
            ex: .header {}
            .header__main {}
            .header__main-white {}

    SAAS
        CSS preprocessor
        SAAS code -> compiled CSS code
        features
            variables
            nesting
            operators
                for math operations in CSS 
            Partials and imports 
                to write CSS in different files and importing them into 1 single file
                file name starts with underscore
            Mixins
                to write reusable pieces of CSS code 
                create
                    @mixin name {}
                use 
                    @include name
                @content
                    used to pass block of code to mixin
                    ex: @include name{
                        // code to pass inside mixin
                    }
                @if 
                    to check passed arguments
            Functions 
                similar to mixins, with difference that they can return a value that can be used 
                create
                    @function name {}
                use 
                    name()
            extends
                to make different selectors inherit declarations that are common to all of them
                create placeholder 
                    %name {}
                use
                    @extend %name
            control directives
                for writing complex code using conditions and loops
            SASS vs SCSS syntax 
                SASS don't have {}, SCSS have {}                
                SASS
                    .nav 
                        list-item:none;

                        & li 
                            margin-left:30px;
                SCSS
                    .nav {
                        list-item:none;

                        & li {
                            margin-left:30px;
                        }
                    }
            $var-name is used to create variables
            & copies selector until that point inside nested
        folder structure for sass (7-1)
            styles
                main.scss
                base
                    presets
                    animations
                    typography
                    utilities etc
                layout
                abstracts
                    functions 
                    mixins
                    variables
                components
                pages
                themes
                vendors

    Responsive design principles 
        Fluid layouts 
            to allow webpage to adapt to current viewport width or height
            use %vh/vw instead of px 
            max-width instead of width
        Responsive units 
            rem instead of px
        Flexible Images 
            use % dimensions along with max-width
        Media queries 
            change css on certain viewport widths (breakpoints)
    Layout Types 
        Float layouts 
            old way of building layouts
        Flex box 
            modern way of building 1-dimensional row/column
        CSS Grid 
            for laying out element in a fully fledged 2-dimensional grid         
    clip-path 
        used to clip the image in desired shape
        ex:polygon, triangle etc shape for the image
    -webkit-background-clip: text;
        background image is cliped exactly like the text 
        image is shown background of letters
        font color should be transparent
    Responsive Images 
        give right images for right screen size
        avoid large images on smaller devices
        can use different images on different devices
        can change images as per density or width using srcset and sizes
        in media queries we can use min/max-resolution
    span
        can be used to style two things differently
        but interpret both as single 
        ex:Heading with caption
    outline vs border 
        outline is same as border 
        but with outline we can give some gap btw outline and element
        with 'outline-offset' property
    center a div
        if we don't know it's size or it has some big shape
        position: absolute;
        top: 50%;
        left: 50%;
        now div little to the right from center because of it's size
        transform: translate(-50%,-50%);
        translate will move 50% of ***it's own width and height to left and top respectively
        so this make center of div is centered inside parent
    center a block element inside a block element
        margin: 0 auto;
        browser will set margin equally at left and right 
    shape-outside 
        property controls how content will wrap around a floated elementâ€™s bounding-box. 
        Typically this is so that text can reflow over a shape such as a circle, ellipse or a polygon:
    transition is used for simple animations
    animations 
        create 
            @keyframes animation-name
        use 
            animation : animation-name 1s
    skew 
        streaches element in X or Y or both directions
    background-blend-mode
        to blend gradient and image for background-image
    weird behaviour in transform 
        backface-visibility: hidden
        this will solve the issue in most cases
    filter
        used to give some effects to the element
        like blur, brightness etc
    linear gradient
        gradient starts from 1 side to other side
        we can specify % at which point in length color should be for each color 
        ex: white 0%, white 50% 
        from 0 to 50% of len solid white will be there
    radial gradient
        gradient starts from middle of element to total element
    :target pseudo class
        applies when url changes to id of special element
    
    Responsive 
        desktop first approach
            we use max-width in media queries
        mobile first approach
            we use min-width in media queries
    
    @supports
        used to check if browser supports specified declaration
        ex: @supports (clip-path:polygon(0,0)){

        }  

    Flexbox 
        used to align elements to one another, in different directions and orders in 1D layouts
        main axis is parallel to flex direction and cross axis is perpendicular to flex direction         
        usage: display: flex;
        flex container properties
            flex-direction
                row 
                row-reverse
                column
                column-reverse
            flex-wrap 
                nowrap
                wrap
                wrap-reverse
            justify-content
                defines alignment in main axis 
                flex-start 
                flex-end 
                center 
                space-between 
                space-around 
                space-evenly
            align-items
                defines alignment in cross axis
                stretch
                flex-start 
                flex-end 
                center 
                baseline
                    aligns items to text inside the items, text as a base 
            align-content 
                applys when there is more than 1 row of flex items in cross axis (wrapped to next row)
                stretch
                flex-start 
                flex-end 
                center 
                space-between 
                space-around 
        flex item properties 
            align-self 
                overrides container align-items property
            order 
                defines order of item 
            flex-grow
                defines who much item can grow, expanding as much as it can
                defines how much this items needs to grow relative to other items
                default auto
            flex shrink 
                defines who much item can shrink
                default 1, when wiewport is decreased, items will shrink
            flex-basis
                defines base length of item
            all three properties can be set as 
                flex: 0 1 auto

    Grid
        display: grid;
        row axis and column axis
        numbering is given to each line in grid for both axis
        repeat 
            used to repeat the sizes 
            ex: grid-template-rows: repeat(2,150px)
            creates 2 rows of height 150px
            names 
                repeat(2,[row-start] 150px [row-end])
                usage of these names 
                row-start 1 / row-end 2
                we add position number after name
        fr 
            fractional unit 
            1fr means to take all available space
            used to define parts 
            ex:grid-template-columns: 1fr 2fr 1fr;
            middle column will double the space of first/last column
        Implicit grids
            if items are more than what we defines in templates
            Implicit grids are created automatically to accomidate  all items
        container properties
            grid-template-rows
                define heights of the rows
                names for tracks
                    grid-template-rows: [row1-start] 1fr [row1-end row2-start] 1fr
                    we can give only start name or both start and end names 
                    we can use these names instead of numbers for items
                    same for columns as well
            grid-template-columns
                define widths of the columns
            max-content 
                set to width/height of max content in that column/row
            min-content 
                set min width/height required to fit the content in that column/row
            minmax()
                set min and max width/height for column/row
                ex:grid-template-rows: repeat(2,minmax(150px, min-content))
            auto-fill
                creates columns throughout the container with specified width
                ex: grid-template-columns:repeat(auto-fill,100px)
                this will create as many as columns to fit inside the container
                same for rows 
            auto-fit 
                same as auto-fill
                but empty cells width will be 0 if any, leaving space inside container
            grid-template-areas
                we can give names to all the cells in grid 
                then those names can be used in item grid area 
                ex: grid-template-area: "head head side"
                                        "main main side" 
                    grid-area: head; like wise for each item
                    here, head item will span 2 cells in the row, as specified in template area
            grid-row-gap
            grid-column-gap 
            grid-gap 
                same gap btw for both columns and rows
            justify-items
                aligns items in x/row axis
                default stretch
            align-items 
                aligns items in y/column axis
                default stretch
            justify-content 
                if grid is smaller than it's container, we can use these to align it inside container
                aligns grid in x/row axis
            align-content 
                aligns grid in y/column axis
            grid-auto-rows
                define height of Implicit rows
            grid-auto-columns
                define width of Implicit columns
            grid-auto-flow
                define flow of Implicit grid, Implicit items will be added in next row
                default row
                adding dense 
                    it removes any empty cells, fill those cells with items 
        item properties
            grid-row-start
                define start row number to position the item in grid
            grid-row-end
                define end row number to position the item in grid
            grid-column-start
                same as above 
            grid-column-end
                same as above 
            grid-row 
                combine start and end row number
                ex: start / end
            grid-column
                combine start and end column number
                ex: start / end
            grid-area
                it combines above grid-row grid-column 
                ex: row start / row end / column start / column end
            *by increasing grid-row or grid column end number we can span/merge the cells
            span 
                span is used to specify no of cells that item needs to occupy
                ex: grid-column: 1/span 2
                this item will span to 2 cells 
                -1 for end
                    to span until the end 
                    ex: grid-column: 1/-1
            we can have multiple grid items on same cell (stacked on eachother)
            justify-self
                aligns item in x/row axis
                default stretch
            align-self
                aligns item in y/column axis
                default stretch
            order        
